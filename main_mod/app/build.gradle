plugins {
    id 'application'

    // https://jreleaser.org/guide/latest/tools/jreleaser-gradle.html
    id 'org.jreleaser' version '1.17.0'

    // build fatJar (adds task shadowJar)
    // https://gradleup.com/shadow
    // https://gradleup.com/shadow/getting-started/#default-java-groovy-tasks
    /*
        Note: creates
            distributions\app-shadow-x.xx.x.zip"
            and distributions\app-shadow-x.xx.x.tar"
     */
    id 'com.gradleup.shadow' version '9.0.0-beta11'
}

version = '0.79.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree ( dir: '../../dependencies' )

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.18.3'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

sourceSets {
    main {
        java {
            srcDirs += [
                '../../sub_mods/pdml-companion/src/main/java',
                '../../sub_mods/pdml-core/src/main/java',
                '../../sub_mods/pdml-data/src/main/java',
                '../../sub_mods/pdml-html/src/main/java',
                '../../sub_mods/pdml-json/src/main/java',
                '../../sub_mods/pdml-parser/src/main/java',
                '../../sub_mods/pdml-reader/src/main/java',
                '../../sub_mods/pdml-utils/src/main/java',
                '../../sub_mods/pdml-writer/src/main/java',
                '../../sub_mods/pdml-xml/src/main/java'
            ]

            // doesn't work
            // exclude '../../pp-basics/src/main/java/module-info.java'
            //    '../pp-text/src/main/java/module-info.java'
        }
    }

    main {
        resources {
            srcDirs += [
                '../../sub_mods/pdml-data/src/main/resources',
                '../../sub_mods/pdml-html/src/main/resources'
            ]
        }
    }

    test {
        java {
            srcDirs += [
                '../../sub_mods/pdml-companion/src/test/java',
                '../../sub_mods/pdml-core/src/test/java',
                '../../sub_mods/pdml-data/src/test/java',
                '../../sub_mods/pdml-html/src/test/java',
                '../../sub_mods/pdml-json/src/test/java',
                '../../sub_mods/pdml-parser/src/test/java',
                '../../sub_mods/pdml-reader/src/test/java',
                '../../sub_mods/pdml-utils/src/test/java',
                '../../sub_mods/pdml-writer/src/test/java',
                '../../sub_mods/pdml-xml/src/test/java'
            ]
        }
    }
}

java {
/*
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
 */
    sourceCompatibility = "17"
    targetCompatibility = "17"
}

test {
    useJUnitPlatform()
//    jvmArgs += "--enable-preview"
}

tasks.withType(JavaCompile) {
    // options.compilerArgs += '-Xlint:preview'
    // options.compilerArgs += '--enable-preview'
    options.compilerArgs += '-Xlint:deprecation'
    options.compilerArgs += '-Xlint:unchecked'

    options.compilerArgs += '--release'
    options.compilerArgs += '17'
}

/*
tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}
 */

application {
    mainClass = 'dev.pp.pdml.companion.cli.Main'
    applicationDefaultJvmArgs = ['-ea'] // enable assertions
}

String myLibName = "pp-pdml"
String myAppName = "pdmlc"

distZip {
    archiveBaseName = myAppName + "-java-app"
}

distTar {
    archiveBaseName = myAppName + "-java-app"
}

tasks.startScripts {
    applicationName = myAppName
}

jar {
    archiveBaseName = myLibName
    manifest {
        attributes(
            'Main-Class': 'dev.pp.pdml.companion.cli.Main',
            'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )
    }
}


tasks.register ( 'javadocZip', Zip) {
    group = 'Documentation'
    description = 'Archives Javadoc into a zip file.'
    from tasks.javadoc // Include the generated Javadoc files
    archiveBaseName.set ( "${myLibName}-javadoc" )
    // archiveVersion.set('1.0.0') // Optional: include a version
    destinationDirectory.set ( layout.buildDirectory.dir ( 'archives' ) )
}

// tasks.named ( 'shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar ) {
tasks.named ( 'shadowJar' ) {
    destinationDirectory = file ( "$buildDir/fatJar")
    archiveBaseName = myLibName
    // archiveClassifier.set('')
    // archiveVersion.set('')
}

jreleaser {
    dryrun = true
    gitRootSearch = true
    // basedir = '../'
    // strict = false
    configFile = 'jreleaser.yml'
}
